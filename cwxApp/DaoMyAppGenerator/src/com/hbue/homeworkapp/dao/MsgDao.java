package com.hbue.homeworkapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hbue.homeworkapp.dao.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MSG.
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgTitle = new Property(1, String.class, "msgTitle", false, "MSG_TITLE");
        public final static Property MsgSender = new Property(2, String.class, "msgSender", false, "MSG_SENDER");
        public final static Property MsgInfo = new Property(3, String.class, "msgInfo", false, "MSG_INFO");
        public final static Property MsgPath = new Property(4, String.class, "msgPath", false, "MSG_PATH");
        public final static Property MsgData = new Property(5, String.class, "msgData", false, "MSG_DATA");
    };


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MSG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MSG_TITLE' TEXT," + // 1: msgTitle
                "'MSG_SENDER' TEXT," + // 2: msgSender
                "'MSG_INFO' TEXT," + // 3: msgInfo
                "'MSG_PATH' TEXT," + // 4: msgPath
                "'MSG_DATA' TEXT);"); // 5: msgData
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgTitle = entity.getMsgTitle();
        if (msgTitle != null) {
            stmt.bindString(2, msgTitle);
        }
 
        String msgSender = entity.getMsgSender();
        if (msgSender != null) {
            stmt.bindString(3, msgSender);
        }
 
        String msgInfo = entity.getMsgInfo();
        if (msgInfo != null) {
            stmt.bindString(4, msgInfo);
        }
 
        String msgPath = entity.getMsgPath();
        if (msgPath != null) {
            stmt.bindString(5, msgPath);
        }
 
        String msgData = entity.getMsgData();
        if (msgData != null) {
            stmt.bindString(6, msgData);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgSender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgInfo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msgPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // msgData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgSender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgData(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
