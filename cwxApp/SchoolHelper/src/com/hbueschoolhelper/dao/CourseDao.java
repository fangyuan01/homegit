package com.hbueschoolhelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hbueschoolhelper.dao.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COURSE.
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CourseName = new Property(1, String.class, "courseName", false, "COURSE_NAME");
        public final static Property TeacherName = new Property(2, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property ClassRoom = new Property(3, String.class, "classRoom", false, "CLASS_ROOM");
        public final static Property Week = new Property(4, Integer.class, "week", false, "WEEK");
        public final static Property ClassLength = new Property(5, Integer.class, "classLength", false, "CLASS_LENGTH");
        public final static Property OddWeeks = new Property(6, Integer.class, "oddWeeks", false, "ODD_WEEKS");
        public final static Property Startweek = new Property(7, Integer.class, "startweek", false, "STARTWEEK");
        public final static Property Lastweek = new Property(8, Integer.class, "lastweek", false, "LASTWEEK");
    };


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COURSE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COURSE_NAME' TEXT," + // 1: courseName
                "'TEACHER_NAME' TEXT," + // 2: teacherName
                "'CLASS_ROOM' TEXT," + // 3: classRoom
                "'WEEK' INTEGER," + // 4: week
                "'CLASS_LENGTH' INTEGER," + // 5: classLength
                "'ODD_WEEKS' INTEGER," + // 6: oddWeeks
                "'STARTWEEK' INTEGER," + // 7: startweek
                "'LASTWEEK' INTEGER);"); // 8: lastweek
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COURSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(3, teacherName);
        }
 
        String classRoom = entity.getClassRoom();
        if (classRoom != null) {
            stmt.bindString(4, classRoom);
        }
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(5, week);
        }
 
        Integer classLength = entity.getClassLength();
        if (classLength != null) {
            stmt.bindLong(6, classLength);
        }
 
        Integer oddWeeks = entity.getOddWeeks();
        if (oddWeeks != null) {
            stmt.bindLong(7, oddWeeks);
        }
 
        Integer startweek = entity.getStartweek();
        if (startweek != null) {
            stmt.bindLong(8, startweek);
        }
 
        Integer lastweek = entity.getLastweek();
        if (lastweek != null) {
            stmt.bindLong(9, lastweek);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // teacherName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classRoom
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // week
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // classLength
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // oddWeeks
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // startweek
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // lastweek
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeacherName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassRoom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeek(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setClassLength(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setOddWeeks(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStartweek(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLastweek(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
