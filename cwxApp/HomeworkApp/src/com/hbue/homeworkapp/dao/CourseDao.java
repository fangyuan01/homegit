package com.hbue.homeworkapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table COURSE.
 */
public class CourseDao extends AbstractDao<Course, Long> {

	public static final String TABLENAME = "COURSE";

	/**
	 * Properties of entity Course.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property CourseNum = new Property(0, Long.class,
				"courseNum", true, "COURSE_NUM");
		public final static Property CourseName = new Property(1, String.class,
				"courseName", false, "COURSE_NAME");
		public final static Property TeacherName = new Property(2,
				String.class, "teacherName", false, "TEACHER_NAME");
		public final static Property ImgPath = new Property(3, String.class,
				"imgPath", false, "IMG_PATH");
		public final static Property CourseTime = new Property(4, String.class,
				"courseTime", false, "COURSE_TIME");
		public final static Property ClassRoom = new Property(5, String.class,
				"classRoom", false, "CLASS_ROOM");
	};

	public CourseDao(DaoConfig config) {
		super(config);
	}

	public CourseDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'COURSE' (" + //
				"'COURSE_NUM' INTEGER PRIMARY KEY ," + // 0: courseNum
				"'COURSE_NAME' TEXT," + // 1: courseName
				"'TEACHER_NAME' TEXT," + // 2: teacherName
				"'IMG_PATH' TEXT," + // 3: imgPath
				"'COURSE_TIME' TEXT," + // 4: courseTime
				"'CLASS_ROOM' TEXT);"); // 5: classRoom
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'COURSE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Course entity) {
		stmt.clearBindings();

		Long courseNum = entity.getCourseNum();
		if (courseNum != null) {
			stmt.bindLong(1, courseNum);
		}

		String courseName = entity.getCourseName();
		if (courseName != null) {
			stmt.bindString(2, courseName);
		}

		String teacherName = entity.getTeacherName();
		if (teacherName != null) {
			stmt.bindString(3, teacherName);
		}

		String imgPath = entity.getImgPath();
		if (imgPath != null) {
			stmt.bindString(4, imgPath);
		}

		String courseTime = entity.getCourseTime();
		if (courseTime != null) {
			stmt.bindString(5, courseTime);
		}

		String classRoom = entity.getClassRoom();
		if (classRoom != null) {
			stmt.bindString(6, classRoom);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Course readEntity(Cursor cursor, int offset) {
		Course entity = new Course(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // courseNum
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseName
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // teacherName
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgPath
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // courseTime
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // classRoom
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Course entity, int offset) {
		entity.setCourseNum(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setTeacherName(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setImgPath(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setCourseTime(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setClassRoom(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Course entity, long rowId) {
		entity.setCourseNum(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Course entity) {
		if (entity != null) {
			return entity.getCourseNum();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
